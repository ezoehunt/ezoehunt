<?php
/**
* @package ehtheme
*
* Based on Twentyseventeen Wordpress theme
*
* Theme Functions
*
*/

function ehtheme_setup() {
	/*
  * TODO - if rss doesnt show up correctly in head, turn this on and delete manual stuff from head
  */
	//add_theme_support( 'automatic-feed-links' );
  /* --- Add featured image to posts --- */
  add_theme_support( 'post-thumbnails' );
  /* --- No idea --- */
	add_image_size( 'ehtheme-featured-image', 2000, 1200, true );
	add_image_size( 'ehtheme-thumbnail-avatar', 100, 100, true );

	/* --- No idea --- */
  add_theme_support( 'html5', array(
		'comment-form',
		'comment-list',
		'gallery',
		'caption',
	) );
}
add_action( 'after_setup_theme', 'ehtheme_setup' );


/* --- Remove empty Ps in the_content generated by Wordpress --- */
remove_filter( 'the_content', 'wpautop' );


/* --- Remove admin bar from site --- */
add_filter('show_admin_bar', '__return_false');


/* --- Update Admin CSS --- */
function admin_style() {
  wp_enqueue_style('admin-styles', get_template_directory_uri().'/admin_eztheme.css');
}
add_action('admin_enqueue_scripts', 'admin_style');


/* --- Add Categories to bodyclass for Single Posts
* Needed because I use bodyclass to indicate "active" state in nav for all posts. By default Wordpress doesn't include category name for Single Posts in bodyclass.
*/
add_filter('body_class','add_category_to_single');
function add_category_to_single($classes) {
  if (is_single() ) {
    global $post;
    foreach((get_the_category($post->ID)) as $category) {
      // add category slug to the $classes array
      $classes[] = $category->category_nicename;
    }
  }
  // return the $classes array
  return $classes;
}


// INLCUDE NEW FIELDS FOR CUSTOM POST TYPE = PROJECT
include '_project-details.php';


// CREATE NEW CUSTOM POST TYPE = PROJECT
function create_project_post_type() {
  // post type name = name shown in URL, eg work/post-1
	register_post_type( 'work',
		array(
			'labels' => array(
				'name' => 'Portfolio',
				'singular_name' => 'Project',
				'add_new' => 'Add New',
				'add_new_item' => 'Add New Project',
				'edit_item' => 'Edit Project',
				'new_item' => 'New Project',
				'view_item' => 'View Project',
				'search_items' => 'Search Projects',
				'not_found' =>  'Nothing Found',
				'not_found_in_trash' => 'Nothing found in the Trash',
				'parent_item_colon' => ''
			),
			'public' => true,
      'has_archive' => true,
      'publicly_queryable' => true,
			'show_ui' => true,
			'query_var' => true,
			'rewrite' => true,
			'capability_type' => 'post',
			'hierarchical' => false,
			'menu_position' => null,
			'supports' => array('title','editor','thumbnail','author','thumbnail','excerpt','custom-fields'),
      'taxonomies'  => array( 'category' ),
		)
	);
}
add_action( 'init', 'create_project_post_type' );


// CREATE CUSTOM TAXONOMY FOR CUSTOM POST TYPE = PROJECT
register_taxonomy("project_tags", array("work"), array(
	"hierarchical" => false,
	"label" => "Project Tags",
	"singular_label" => "Project Tag",
	"rewrite" => true
));


// Add Headline and Subhead boxes to regular Post and Page Types
function eh_register_meta_boxes( $meta_boxes ) {
    $prefix = 'eh_';

    $meta_boxes[] = array(
        'id'         => 'titles',
        'title'      => __( 'Post Titles', 'textdomain' ),
        'post_types' => array( 'post', 'page' ),
        'context'    => 'normal',
        'priority'   => 'high',
        'fields' => array(
            array(
                'name'  => __( 'Post Headline', 'textdomain' ),
                'desc'  => 'The Post Headline appears in magazine header area.',
                'id'    => $prefix . 'headline',
                'type'  => 'text',
                'clone' => false,
            ),
            array(
                'name'  => __( 'Post Subhead', 'textdomain' ),
                'desc'  => 'The Post Subhead appears in the body copy aera.',
                'id'    => $prefix . 'subhead',
                'type'  => 'text',
                'clone' => false,
            ),
        )
    );
    return $meta_boxes;
}
add_filter( 'rwmb_meta_boxes', 'eh_register_meta_boxes' );


// Misc Functions
function sluggify($string)
{
  # Prep string with some basic normalization
  $string = strtolower($string);
  $string = strip_tags($string);
  $string = stripslashes($string);
  $string = html_entity_decode($string);

  # Remove quotes (can't, etc.)
  $string = str_replace('\'', '', $string);

  # Replace non-alpha numeric with hyphens
  $match = '/[^a-z0-9]+/';
  $replace = '-';
  $string = preg_replace($match, $replace, $string);

  $string = trim($string, '-');

  return $string;
}


function mygetcatname($post_id) {
  $post_categories = wp_get_post_categories( $post_id );
  $cats = array();
  foreach ( $post_categories as $c ) {
    $cat = get_category( $c );
    $cat_name = $cat->name;
  }
  return $cat_name;
}


function mygetcatslug($post_id) {
  $post_categories = wp_get_post_categories( $post_id );
  $cats = array();
  foreach ( $post_categories as $c ) {
    $cat = get_category( $c );
    $cat_slug = $cat->slug;
  }
  return $cat_slug;
}


function mynextprevious( $post_id, $type ) {
  global $post;
  // Get the category
  $cat_name = mygetcatname($post_id);
  $cat_slug = sluggify($cat_name);

  // Adjust output
  if ( $cat_name == 'Work' ) {
    $cat_alt = $type.' Porfolio project';
  }
  if ( $cat_name == 'Words' ) {
    $cat_alt = $type.' post in Words';
  }
  // Get next/previous in the same category
  // Match type to icons + function
  if ( $type == 'previous' ) {
    $function = get_previous_post(true,'');
    $icon = '<span class="fa fa-stack"><i class="fa fa-circle fa-stack-1x icon-a icon-bg-'.$cat_slug.'" aria-hidden="true"></i><i class="fa fa-arrow-left fa-stack-1x icon-b icon-color-inverse" aria-hidden="true"></i></span>';
  }
  elseif ( $type == 'next' ) {
    $function = get_next_post(true,'');
    $icon = '<span class="fa fa-stack"><i class="fa fa-circle fa-stack-1x icon-a icon-bg-'.$cat_slug.'" aria-hidden="true"></i><i class="fa fa-arrow-right fa-stack-1x icon-b icon-color-inverse" aria-hidden="true"></i></span>';

  }
  // If none, return false (empty)
  if( $function ) {
    return '<a class="" title="See '.$cat_alt.'" href="'.esc_url(get_permalink($function->ID)).'">'.$icon.'</a>';
  }
  else {
    return false;
  }
}


function mygetimageid($image_url) {
	global $wpdb;
	$attachment = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE guid='%s';", $image_url ));
  return $attachment;
}


function mypaginate($query) {
  $big = 999999999;
  $translated = __( 'Page', 'mytextdomain' );

  return paginate_links( array (
  	'base' => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),
  	'format'    => '?paged=%#%',
    'end_size'  => 1,
    'mid_size'  => 1,
    'prev_next' => true,
  	'prev_text' => __('&laquo;'),
  	'next_text' => __('&raquo;'),
  	'current'   => max( 1, get_query_var('paged') ),
  	'total'     => $query->max_num_pages,
    'before_page_number' => '<span class="screen-reader-text">'.$translated.' </span>'
    ) );
}



function break_text($text){
    $length = 500;
    //don't cut if too short
    if(strlen($text)<$length+10) return $text;
    //find next space after desired length
    $break_pos = strpos($text, ' ', $length);
    $visible = substr($text, 0, $break_pos);
    return balanceTags($visible) . " [â€¦]";
}
